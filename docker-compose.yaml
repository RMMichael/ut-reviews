# env variables
#   required: NODE_ENV=development|production, POSTGRES_PASSWORD
#   optional (for dev host port conflicts): FRONTEND_PORT, BACKEND_PORT, DB_PORT, NGINX_PORT

version: "3"
services:
  backend:
    build: ./backend
    depends_on:
      - db
    command: if [ "$NODE_ENV" = "development" ] ; then npm run start-watch ; else npm run start ; fi
    environment:
      - DB_URL="postgresql://postgres:${POSTGRES_PASSWORD:?required}@db:5432/postgres?sslmode=disable"
      - NODE_ENV=${NODE_ENV:-production}
      - BACKEND_PORT=3000
    ports:
      - ${BACKEND_PORT:-3000}:3000
      - 9229:9229
      - 9230:9230
    volumes:
      - ./backend:/code
      - /code/node_modules
      # keep node_modules within container
      # https://docs.docker.com/compose/compose-file/compose-file-v3/#volumes-for-services-swarms-and-stack-files
      # https://docs.docker.com/storage/volumes/#populate-a-volume-using-a-container
  frontend:
    build: ./frontend
    command: if [ "$NODE_ENV" = "development" ] ; then npm run dev ; else npm run build ; fi
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - FRONTEND_PORT=8080
      - BACKEND_PORT=3000
    ports:
      - ${FRONTEND_PORT:-8080}:8080
    volumes:
      - ./frontend:/code
      - /code/node_modules

  db:
    image: postgres:13
    volumes:
#      - ./db/data:/var/lib/postgresql/data
      # https://github.com/docker-library/docs/blob/master/postgres/README.md#initialization-scripts
      - ./db/initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?required}
    ports:
      - ${DB_PORT:-5432}:5432

  nginx:
    build: ./nginx
    depends_on:
      - backend
      - frontend
    ports:
      - ${NGINX_HTTP_PORT:-80}:80
      - ${NGINX_HTTPS_PORT:-443}:443
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf

  # enabling https
  # for development, https://web.dev/how-to-use-local-https/
  # for production,
  # certbot will be installed natively on the server with auto renew and a posthook to reload nginx
  # docker-compose exec nginx nginx -s reload
  # https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx
  # https://certbot.eff.org/docs/using.html#renewing-certificates
