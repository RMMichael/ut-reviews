# DEVELOPMENT: merges with docker-compose.override.yaml
#   - mainly for hot reloading and dev host ports
# PRODUCTION: don't merge: `docker-compose -f docker-compose.yaml up --build -d`
# env variables are loaded from file: .env
#   REQUIRED: NODE_ENV=development|production, POSTGRES_PASSWORD
#   optional: (for dev host port conflicts) FRONTEND_PORT, BACKEND_PORT, DB_PORT, NGINX_PORT

# TODO maybe [ "bash", "-c", "if [ "$NODE_ENV" = "development" ]; then ; else ; fi" ]
version: "3.8"
services:
  backend:
    build: ./backend
    depends_on:
      - db
    command: ["npm", "run", "start"]
    environment:
      - DB_URL="postgresql://postgres:${POSTGRES_PASSWORD:?required}@db:5432/postgres?sslmode=disable"
      - NODE_ENV=${NODE_ENV:-production}
      - BACKEND_PORT=3000
    volumes:
      - ./backend:/code
      - /code/node_modules
      # keep node_modules within container
      # https://docs.docker.com/compose/compose-file/compose-file-v3/#volumes-for-services-swarms-and-stack-files
      # https://docs.docker.com/storage/volumes/#populate-a-volume-using-a-container

  frontend:
    build: ./frontend
    command: ["npm", "run", "build"]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - FRONTEND_PORT=8080
      - BACKEND_PORT=3000
    volumes:
      - ./frontend:/code
      - /code/node_modules

  db:
    image: postgres:13
    volumes:
#      - ./db/data:/var/lib/postgresql/data
      # https://github.com/docker-library/docs/blob/master/postgres/README.md#initialization-scripts
      - ./db/initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?required}

  nginx:
    build: ./nginx
    depends_on:
      - backend
      - frontend
    ports:
      - ${NGINX_HTTP_PORT:-80}:80
      - ${NGINX_HTTPS_PORT:-443}:443
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      # managed by Certbot
      # user must supply generated key and cert path in .env to use in productuon
      # or copy with default to the path specified on the right of : - supply self generated key in the location below
      - ${KEY_FOLDER:-tlskey}:/etc/ssl/private
      - ${CERT_FOLDER:-tlscert}:/etc/ssl/certs
volumes:
  tlskey:
  tlscert:

  # TODO nginx environment variables ?
  # https://github.com/docker-library/docs/tree/master/nginx#using-environment-variables-in-nginx-configuration-new-in-119

  # enabling https
  # for development, https://web.dev/how-to-use-local-https/
  # for production,
  # certbot will be installed natively on the server with auto renew and a posthook to reload nginx
  # docker-compose exec nginx nginx -s reload
  # https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx
  # https://certbot.eff.org/docs/using.html#renewing-certificates
